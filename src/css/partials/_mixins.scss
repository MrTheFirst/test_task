// TODO [danil]: rectangle
@mixin rectangle($width, $height, $color) {
  width: $width;
  height: $height;
  background: $color;
}

@mixin parallelogram($width, $height, $skew, $color) {
  @include rectangle($width, $height, $color);
  -webkit-transform: skew($skew);
  -moz-transform: skew($skew);
  -ms-transform: skew($skew);
  -o-transform: skew($skew);
  transform: skew($skew);
}

@mixin square($size, $color) {
  @include rectangle($size, $size, $color);
}

@mixin circle($size, $color) {
  @include square($size, $color);
  -webkit-border-radius: $size / 2;
  -moz-border-radius: $size / 2;
  border-radius: $size / 2;
}

@mixin oval($width, $height, $color) {
  width: $width;
  height: $height;
  -webkit-border-radius: #{$width} / #{$height};
  -moz-border-radius: #{$width} / #{$height};
  border-radius: #{$width} / #{$height};
  background: $color;
}

@mixin triangle($size, $color, $direction: 'up') {
  width: 0;
  height: 0;

  @if $direction == 'up' {
    border-right: $size solid transparent;
    border-bottom: $size * 1.732 solid $color;
    border-left: $size solid transparent;
  } @else if $direction == 'down' {
    border-top: $size * 1.732 solid $color;
    border-right: $size solid transparent;
    border-left: $size solid transparent;
  } @else if $direction == 'left' {
    border-top: $size solid transparent;
    border-right: $size * 1.732 solid $color;
    border-bottom: $size solid transparent;
  } @else if $direction == 'right' {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size * 1.732 solid $color;
  }
}

@mixin corner-triangle($size, $color, $corner: 'top-left') {
  width: 0;
  height: 0;

  @if $corner == 'top-left' {
    border-top: $size solid $color;
    border-right: $size solid transparent;
  } @else if $corner == 'top-right' {
    border-top: $size solid $color;
    border-left: $size solid transparent;
  } @else if $corner == 'bottom-left' {
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  } @else if $corner == 'bottom-right' {
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
  }
}

@mixin trapezoid($width, $color) {
  width: $width;
  height: 0;
  border-right: $width / 2 solid transparent;
  border-bottom: $width solid $color;
  border-left: $width / 2 solid transparent;
}

@mixin chevron($width, $height, $skew, $color, $direction: 'up') {
  position: relative;
  width: $width;
  height: $height;

  @if $direction == 'down' {
    -webkit-transform: rotate(180deg);
    -moz-transform: rotate(180deg);
    -ms-transform: rotate(180deg);
    -o-transform: rotate(180deg);
    transform: rotate(180deg);
  } @else if $direction == 'left' {
    -webkit-transform: rotate(-90deg);
    -moz-transform: rotate(-90deg);
    -ms-transform: rotate(-90deg);
    -o-transform: rotate(-90deg);
    transform: rotate(-90deg);
  } @else if $direction == 'right' {
    -webkit-transform: rotate(90deg);
    -moz-transform: rotate(90deg);
    -ms-transform: rotate(90deg);
    -o-transform: rotate(90deg);
    transform: rotate(90deg);
  }

  &:before, &:after {
    position: absolute;
    top: 0;
    width: 50%;
    height: 100%;
    background: $color;
    content: '';
  }
  &:before {
    left: 0;
    -webkit-transform: skew(0deg, $skew);
    -moz-transform: skew(0deg, $skew);
    -ms-transform: skew(0deg, $skew);
    -o-transform: skew(0deg, $skew);
    transform: skew(0deg, $skew);
  }
  &:after {
    right: 0;
    -webkit-transform: skew(0deg, -$skew);
    -moz-transform: skew(0deg, -$skew);
    -ms-transform: skew(0deg, -$skew);
    -o-transform: skew(0deg, -$skew);
    transform: skew(0deg, -$skew);
  }
}

// TODO [danil]: Burger parts
//
// (---) top    -> &::before
// [---] middle -> &
// (---) bottom -> &::after


// Vendor prefixes
$sass-burger-add-vendor-prefixes: true !default;

// Burger
@mixin burger($width: 30px, $height: 5px, $gutter: 3px, $color: #000, $border-radius: 0, $transition-duration: .3s) {
  $burger-height: $height !global;
  $burger-gutter: $gutter !global;

  position: relative;
  margin-top: $height + $gutter;
  margin-bottom: $height + $gutter;

  @if $sass-burger-add-vendor-prefixes {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }
  user-select: none;

  // 1. Fixes jagged edges in Firefox, see issue #10.
  &, &::before, &::after {
    display: block;
    width: $width;
    height: $height;
    background-color: $color;
    outline: 1px solid transparent; // 1
    @if $border-radius != 0 {
      border-radius: $border-radius;
    }

    @if $sass-burger-add-vendor-prefixes {
      -webkit-transition-property: background-color, -webkit-transform;
      -moz-transition-property: background-color, -moz-transform;
      -o-transition-property: background-color, -o-transform;
    }
    transition-property: background-color, transform;

    @if $sass-burger-add-vendor-prefixes {
      -webkit-transition-duration: $transition-duration;
      -moz-transition-duration: $transition-duration;
      -o-transition-duration: $transition-duration;
    }
    transition-duration: $transition-duration;
  }

  &::before, &::after {
    position: absolute;
    content: "";
  }

  &::before {
    top: -($height + $gutter);
  }

  &::after {
    top: $height + $gutter;
  }
}


// Select parts of the burger
@mixin burger-parts {
  &, &::before, &::after {
    @content;
  }
}

@mixin burger-top {
  &::before {
    @content;
  }
}

@mixin burger-middle {
  & {
    @content;
  }
}

@mixin burger-bottom {
  &::after {
    @content;
  }
}


// Burger animations
@mixin burger-to-cross($color: auto) {
  & {
    background-color: transparent;
  }
  @if ($color != auto) {
    &::before, &::after {
      background-color: $color;
    }
  }
  &::before {
    @if $sass-burger-add-vendor-prefixes {
      -webkit-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
      -moz-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
      -ms-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
      -o-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
    }
    transform: translateY($burger-gutter + $burger-height) rotate(45deg);
  }
  &::after {
    @if $sass-burger-add-vendor-prefixes {
      -webkit-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
      -moz-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
      -ms-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
      -o-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
    }
    transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
  }
}